name: Release

on:
  push:
    tags:
      - 'v*'

env:
  DEBUG: napi:*
  APP_NAME: cronflow
  MACOSX_DEPLOYMENT_TARGET: '10.13'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              cd core
              npm install
              npx napi build --platform --release --target x86_64-apple-darwin
              strip -x *.node
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              cd core
              npm install
              npx napi build --platform --release --target aarch64-apple-darwin
              strip -x *.node
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |
              set -e
              cd core
              npm install
              npx napi build --platform --release --target x86_64-unknown-linux-gnu
              strip *.node
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |
              set -e
              cd core
              npm install
              npx napi build --platform --release --target x86_64-unknown-linux-musl
              strip *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |
              set -e
              cd core
              npm install
              npx napi build --platform --release --target aarch64-unknown-linux-gnu
              aarch64-unknown-linux-gnu-strip *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine-aarch64
            build: |
              set -e
              cd core
              npm install
              npx napi build --platform --release --target aarch64-unknown-linux-musl
              aarch64-linux-musl-strip *.node
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: |
              cd core
              npm install
              npx napi build --platform --release --target x86_64-pc-windows-msvc
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: |
              cd core
              npm install
              npx napi build --platform --release --target aarch64-pc-windows-msvc

    name: Build ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}

      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash

      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: '--user 0:0 -v ${{ github.workspace }}:/build -w /build'
          run: ${{ matrix.settings.build }}

      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: core/*.node
          if-no-files-found: error

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Move artifacts
        run: |
          for dir in artifacts/bindings-*; do
            if [ -d "$dir" ]; then
              cp "$dir"/*.node core/ || true
            fi
          done
          ls -la core/

      - name: Install dependencies for publishing
        run: |
          cd core
          npm install

      - name: List packages
        run: |
          cd core
          npx napi prepublish -t npm
          ls -R ./npm
        shell: bash

      - name: Publish platform packages
        run: |
          cd core
          echo "//registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN" >> ~/.npmrc
          npx napi artifacts
          for pkg in npm/@cronflow/*; do
            if [ -d "$pkg" ]; then
              echo "Publishing $pkg..."
              cd "$pkg"
              npm publish --access public || echo "Failed to publish $pkg"
              cd /home/runner/work/cronflow/cronflow/core
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Install main package dependencies
        run: npm install --omit=optional

      - name: Build main package
        run: npm run build:prod

      - name: Publish main package
        run: |
          echo "//registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN" >> ~/.npmrc
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
